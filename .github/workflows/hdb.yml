name: HdB

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build the Docker image
        run: docker build . --file Dockerfile --tag my-image-name:$(date +%s)
        
  test:
    needs: build
    name: Testes
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"
      - name: Install dependencies
        run: | 
          python -m pip install pytest 
          python -m pip install Flask-Testing SQLAlchemy flask_sqlalchemy flask_login flask_bcrypt flask_wtf
      - name: Run tests
        run: PYTHONPATH=$PYTHONPATH:. pytest tests/  # Certifique-se de apontar para o diretório correto
        
  bandit:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Install Bandit
        run: pip install bandit[sarif]

      - name: Run Bandit and output SARIF
        run: |
          bandit -r . --format sarif --output results.sarif

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif
          
  dependency_check:
    needs: test
    runs-on: ubuntu-latest
    name: Dependency-Check
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        id: Dependency-Check
        with:
          project: "Task-Manager-using-Flask"
          path: "."
          format: "HTML"
          out: "reports"
          args: >
            --scan "**/*.py"
            --scan "requirements.txt"
            --failOnCVSS 7
            --enableRetired
      - name: Upload Dependency-Check results
        uses: actions/upload-artifact@v3
        with:
          name: Dependency-Check report
          path: ${{github.workspace}}/reports

  dast:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write  # Permissão necessária para criar issues
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Criação da rede Docker para comunicação entre ZAP e Flask
      - name: Create Docker network
        run: docker network create zap-network

      # Build da imagem Docker da aplicação Flask
      - name: Build Docker image
        run: docker build -t flask-app .

      # Execução da aplicação Flask no contêiner dentro da rede zap-network
      - name: Run Flask app in Docker
        run: |
          docker run -d --network zap-network -p 5000:5000 --name flask-container flask-app
          sleep 30  # Aguarda a inicialização da aplicação

      # Execução do OWASP ZAP apontando para o contêiner Flask
      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.10.0
        with:
          target: "http://flask-container:5000"
          docker_name: "ghcr.io/zaproxy/zaproxy:stable"

      # Upload do relatório de segurança gerado pelo ZAP
      - name: Upload ZAP Report
        uses: actions/upload-artifact@v3
        with:
          name: ZAP Report
          path: zap_report.html

      # Parada do contêiner Flask
      - name: Stop Docker container
        if: always()
        run: docker stop flask-container

      # Remoção da rede Docker
      - name: Remove Docker network
        if: always()
        run: docker network rm zap-network
        
  # Deploy para ambiente de review
  review:
    needs: dast
    runs-on: ubuntu-latest
    environment:
      name: review
      url: http://localhost:5001
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image for review
        run: docker build -t flask-app-review .

      - name: Deploy to review environment
        run: |
          docker run -d -p 5001:5000 --name flask-app-review flask-app-review
          sleep 10

  # Deploy para estágio
  deploy_stage:
    needs: dast
    name: Deploy Stage para Simulação
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Run the Action
        uses: devops-infra/action-pull-request@v0.5.5
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          title: Automatic pull request
          target_branch: staging
          assignee: ${{ github.actor }}
          label: automatic
          get_diff: true
